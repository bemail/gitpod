/**
 * Copyright (c) 2022 Gitpod GmbH. All rights reserved.
 * Licensed under the GNU Affero General Public License (AGPL).
 * See License-AGPL.txt in the project root for license information.
 */

// @generated by protoc-gen-es v0.1.1
// @generated from file gitpod/v1/workspaces.proto (package gitpod.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, FieldMask, JsonReadOptions, JsonValue, PartialMessage, PlainMessage, Timestamp} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Pagination} from "./pagination_pb.js";

/**
 * Admission level describes who can access a workspace instance and its ports.
 *
 * @generated from enum gitpod.v1.AdmissionLevel
 */
export declare enum AdmissionLevel {
  /**
   * @generated from enum value: ADMISSION_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ADMISSION_LEVEL_OWNER_ONLY means the workspace can only be accessed using the owner token
   *
   * @generated from enum value: ADMISSION_LEVEL_OWNER_ONLY = 1;
   */
  OWNER_ONLY = 1,

  /**
   * ADMISSION_LEVEL_EVERYONE means the workspace (including ports) can be accessed by everyone.
   *
   * @generated from enum value: ADMISSION_LEVEL_EVERYONE = 2;
   */
  EVERYONE = 2,
}

/**
 * @generated from message gitpod.v1.ListWorkspacesRequest
 */
export declare class ListWorkspacesRequest extends Message<ListWorkspacesRequest> {
  /**
   * @generated from field: gitpod.v1.Pagination pagination = 1;
   */
  pagination?: Pagination;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 2;
   */
  fieldMask?: FieldMask;

  constructor(data?: PartialMessage<ListWorkspacesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesRequest;

  static equals(a: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined, b: ListWorkspacesRequest | PlainMessage<ListWorkspacesRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListWorkspacesResponse
 */
export declare class ListWorkspacesResponse extends Message<ListWorkspacesResponse> {
  /**
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken: string;

  /**
   * @generated from field: repeated gitpod.v1.ListWorkspacesResponse.WorkspaceAndInstance result = 2;
   */
  result: ListWorkspacesResponse_WorkspaceAndInstance[];

  constructor(data?: PartialMessage<ListWorkspacesResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse;

  static equals(a: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined, b: ListWorkspacesResponse | PlainMessage<ListWorkspacesResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListWorkspacesResponse.WorkspaceAndInstance
 */
export declare class ListWorkspacesResponse_WorkspaceAndInstance extends Message<ListWorkspacesResponse_WorkspaceAndInstance> {
  /**
   * @generated from field: gitpod.v1.Workspace result = 1;
   */
  result?: Workspace;

  /**
   * @generated from field: gitpod.v1.WorkspaceInstance last_active_instances = 2;
   */
  lastActiveInstances?: WorkspaceInstance;

  constructor(data?: PartialMessage<ListWorkspacesResponse_WorkspaceAndInstance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListWorkspacesResponse.WorkspaceAndInstance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkspacesResponse_WorkspaceAndInstance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkspacesResponse_WorkspaceAndInstance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkspacesResponse_WorkspaceAndInstance;

  static equals(a: ListWorkspacesResponse_WorkspaceAndInstance | PlainMessage<ListWorkspacesResponse_WorkspaceAndInstance> | undefined, b: ListWorkspacesResponse_WorkspaceAndInstance | PlainMessage<ListWorkspacesResponse_WorkspaceAndInstance> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetWorkspaceRequest
 */
export declare class GetWorkspaceRequest extends Message<GetWorkspaceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  constructor(data?: PartialMessage<GetWorkspaceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceRequest;

  static equals(a: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined, b: GetWorkspaceRequest | PlainMessage<GetWorkspaceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetWorkspaceResponse
 */
export declare class GetWorkspaceResponse extends Message<GetWorkspaceResponse> {
  /**
   * @generated from field: gitpod.v1.Workspace result = 1;
   */
  result?: Workspace;

  constructor(data?: PartialMessage<GetWorkspaceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceResponse;

  static equals(a: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined, b: GetWorkspaceResponse | PlainMessage<GetWorkspaceResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetOwnerTokenRequest
 */
export declare class GetOwnerTokenRequest extends Message<GetOwnerTokenRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  constructor(data?: PartialMessage<GetOwnerTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetOwnerTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTokenRequest;

  static equals(a: GetOwnerTokenRequest | PlainMessage<GetOwnerTokenRequest> | undefined, b: GetOwnerTokenRequest | PlainMessage<GetOwnerTokenRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetOwnerTokenResponse
 */
export declare class GetOwnerTokenResponse extends Message<GetOwnerTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token: string;

  constructor(data?: PartialMessage<GetOwnerTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetOwnerTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOwnerTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOwnerTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOwnerTokenResponse;

  static equals(a: GetOwnerTokenResponse | PlainMessage<GetOwnerTokenResponse> | undefined, b: GetOwnerTokenResponse | PlainMessage<GetOwnerTokenResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.CreateAndStartWorkspaceRequest
 */
export declare class CreateAndStartWorkspaceRequest extends Message<CreateAndStartWorkspaceRequest> {
  /**
   * @generated from field: string idempotency_token = 1;
   */
  idempotencyToken: string;

  /**
   * @generated from oneof gitpod.v1.CreateAndStartWorkspaceRequest.source
   */
  source: {
    /**
     * @generated from field: string context_url = 2;
     */
    value: string;
    case: "contextUrl";
  } | {
    /**
     * @generated from field: string prebuild_id = 3;
     */
    value: string;
    case: "prebuildId";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: gitpod.v1.StartWorkspaceSpec start_spec = 5;
   */
  startSpec?: StartWorkspaceSpec;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.CreateAndStartWorkspaceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceRequest;

  static equals(a: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined, b: CreateAndStartWorkspaceRequest | PlainMessage<CreateAndStartWorkspaceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.CreateAndStartWorkspaceResponse
 */
export declare class CreateAndStartWorkspaceResponse extends Message<CreateAndStartWorkspaceResponse> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  constructor(data?: PartialMessage<CreateAndStartWorkspaceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.CreateAndStartWorkspaceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAndStartWorkspaceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAndStartWorkspaceResponse;

  static equals(a: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined, b: CreateAndStartWorkspaceResponse | PlainMessage<CreateAndStartWorkspaceResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.StartWorkspaceRequest
 */
export declare class StartWorkspaceRequest extends Message<StartWorkspaceRequest> {
  /**
   * @generated from field: string idempotency_token = 1;
   */
  idempotencyToken: string;

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId: string;

  /**
   * @generated from field: gitpod.v1.StartWorkspaceSpec spec = 3;
   */
  spec?: StartWorkspaceSpec;

  constructor(data?: PartialMessage<StartWorkspaceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.StartWorkspaceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceRequest;

  static equals(a: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined, b: StartWorkspaceRequest | PlainMessage<StartWorkspaceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.StartWorkspaceResponse
 */
export declare class StartWorkspaceResponse extends Message<StartWorkspaceResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * @generated from field: string workspace_url = 2;
   */
  workspaceUrl: string;

  constructor(data?: PartialMessage<StartWorkspaceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.StartWorkspaceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceResponse;

  static equals(a: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined, b: StartWorkspaceResponse | PlainMessage<StartWorkspaceResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetActiveWorkspaceInstanceRequest
 */
export declare class GetActiveWorkspaceInstanceRequest extends Message<GetActiveWorkspaceInstanceRequest> {
  /**
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  constructor(data?: PartialMessage<GetActiveWorkspaceInstanceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetActiveWorkspaceInstanceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveWorkspaceInstanceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveWorkspaceInstanceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveWorkspaceInstanceRequest;

  static equals(a: GetActiveWorkspaceInstanceRequest | PlainMessage<GetActiveWorkspaceInstanceRequest> | undefined, b: GetActiveWorkspaceInstanceRequest | PlainMessage<GetActiveWorkspaceInstanceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetActiveWorkspaceInstanceResponse
 */
export declare class GetActiveWorkspaceInstanceResponse extends Message<GetActiveWorkspaceInstanceResponse> {
  /**
   * @generated from field: gitpod.v1.WorkspaceInstance instance = 1;
   */
  instance?: WorkspaceInstance;

  constructor(data?: PartialMessage<GetActiveWorkspaceInstanceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetActiveWorkspaceInstanceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetActiveWorkspaceInstanceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetActiveWorkspaceInstanceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetActiveWorkspaceInstanceResponse;

  static equals(a: GetActiveWorkspaceInstanceResponse | PlainMessage<GetActiveWorkspaceInstanceResponse> | undefined, b: GetActiveWorkspaceInstanceResponse | PlainMessage<GetActiveWorkspaceInstanceResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetWorkspaceInstanceOwnerTokenRequest
 */
export declare class GetWorkspaceInstanceOwnerTokenRequest extends Message<GetWorkspaceInstanceOwnerTokenRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  constructor(data?: PartialMessage<GetWorkspaceInstanceOwnerTokenRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceInstanceOwnerTokenRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceInstanceOwnerTokenRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceInstanceOwnerTokenRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceInstanceOwnerTokenRequest;

  static equals(a: GetWorkspaceInstanceOwnerTokenRequest | PlainMessage<GetWorkspaceInstanceOwnerTokenRequest> | undefined, b: GetWorkspaceInstanceOwnerTokenRequest | PlainMessage<GetWorkspaceInstanceOwnerTokenRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.GetWorkspaceInstanceOwnerTokenResponse
 */
export declare class GetWorkspaceInstanceOwnerTokenResponse extends Message<GetWorkspaceInstanceOwnerTokenResponse> {
  /**
   * @generated from field: string owner_token = 1;
   */
  ownerToken: string;

  constructor(data?: PartialMessage<GetWorkspaceInstanceOwnerTokenResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.GetWorkspaceInstanceOwnerTokenResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkspaceInstanceOwnerTokenResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkspaceInstanceOwnerTokenResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkspaceInstanceOwnerTokenResponse;

  static equals(a: GetWorkspaceInstanceOwnerTokenResponse | PlainMessage<GetWorkspaceInstanceOwnerTokenResponse> | undefined, b: GetWorkspaceInstanceOwnerTokenResponse | PlainMessage<GetWorkspaceInstanceOwnerTokenResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListenToWorkspaceInstanceRequest
 */
export declare class ListenToWorkspaceInstanceRequest extends Message<ListenToWorkspaceInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  constructor(data?: PartialMessage<ListenToWorkspaceInstanceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListenToWorkspaceInstanceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenToWorkspaceInstanceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenToWorkspaceInstanceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenToWorkspaceInstanceRequest;

  static equals(a: ListenToWorkspaceInstanceRequest | PlainMessage<ListenToWorkspaceInstanceRequest> | undefined, b: ListenToWorkspaceInstanceRequest | PlainMessage<ListenToWorkspaceInstanceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListenToWorkspaceInstanceResponse
 */
export declare class ListenToWorkspaceInstanceResponse extends Message<ListenToWorkspaceInstanceResponse> {
  /**
   * @generated from field: gitpod.v1.WorkspaceInstanceStatus instance_status = 1;
   */
  instanceStatus?: WorkspaceInstanceStatus;

  constructor(data?: PartialMessage<ListenToWorkspaceInstanceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListenToWorkspaceInstanceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenToWorkspaceInstanceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenToWorkspaceInstanceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenToWorkspaceInstanceResponse;

  static equals(a: ListenToWorkspaceInstanceResponse | PlainMessage<ListenToWorkspaceInstanceResponse> | undefined, b: ListenToWorkspaceInstanceResponse | PlainMessage<ListenToWorkspaceInstanceResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListenToImageBuildLogsRequest
 */
export declare class ListenToImageBuildLogsRequest extends Message<ListenToImageBuildLogsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  constructor(data?: PartialMessage<ListenToImageBuildLogsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListenToImageBuildLogsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenToImageBuildLogsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenToImageBuildLogsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenToImageBuildLogsRequest;

  static equals(a: ListenToImageBuildLogsRequest | PlainMessage<ListenToImageBuildLogsRequest> | undefined, b: ListenToImageBuildLogsRequest | PlainMessage<ListenToImageBuildLogsRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.ListenToImageBuildLogsResponse
 */
export declare class ListenToImageBuildLogsResponse extends Message<ListenToImageBuildLogsResponse> {
  /**
   * @generated from field: string line = 1;
   */
  line: string;

  constructor(data?: PartialMessage<ListenToImageBuildLogsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.ListenToImageBuildLogsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListenToImageBuildLogsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListenToImageBuildLogsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListenToImageBuildLogsResponse;

  static equals(a: ListenToImageBuildLogsResponse | PlainMessage<ListenToImageBuildLogsResponse> | undefined, b: ListenToImageBuildLogsResponse | PlainMessage<ListenToImageBuildLogsResponse> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.StopWorkspaceRequest
 */
export declare class StopWorkspaceRequest extends Message<StopWorkspaceRequest> {
  /**
   * @generated from field: string idempotency_token = 1;
   */
  idempotencyToken: string;

  /**
   * @generated from field: string workspace_id = 2;
   */
  workspaceId: string;

  constructor(data?: PartialMessage<StopWorkspaceRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.StopWorkspaceRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceRequest;

  static equals(a: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined, b: StopWorkspaceRequest | PlainMessage<StopWorkspaceRequest> | undefined): boolean;
}

/**
 * @generated from message gitpod.v1.StopWorkspaceResponse
 */
export declare class StopWorkspaceResponse extends Message<StopWorkspaceResponse> {
  constructor(data?: PartialMessage<StopWorkspaceResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.StopWorkspaceResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopWorkspaceResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopWorkspaceResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopWorkspaceResponse;

  static equals(a: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined, b: StopWorkspaceResponse | PlainMessage<StopWorkspaceResponse> | undefined): boolean;
}

/**
 * Workspace describes a single workspace
 *
 * @generated from message gitpod.v1.Workspace
 */
export declare class Workspace extends Message<Workspace> {
  /**
   * workspace_id is the ID of the workspace
   *
   * @generated from field: string workspace_id = 1;
   */
  workspaceId: string;

  /**
   * owner_id is the ID of the user who created this workspace
   *
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * project_id is the ID of the project which this workspace belongs to
   *
   * @generated from field: string project_id = 3;
   */
  projectId: string;

  /**
   * context reports the original context the workspace was created from
   *
   * @generated from field: gitpod.v1.WorkspaceContext context = 4;
   */
  context?: WorkspaceContext;

  /**
   * description is a human readable description of the workspace
   *
   * @generated from field: string description = 5;
   */
  description: string;

  constructor(data?: PartialMessage<Workspace>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.Workspace";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workspace;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workspace;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workspace;

  static equals(a: Workspace | PlainMessage<Workspace> | undefined, b: Workspace | PlainMessage<Workspace> | undefined): boolean;
}

/**
 * WorkspaceContext describes the context a workspace was created from
 *
 * @generated from message gitpod.v1.WorkspaceContext
 */
export declare class WorkspaceContext extends Message<WorkspaceContext> {
  /**
   * All workspace context originates from a URL - this is the context URL
   * which led to the creation of a workspace.
   *
   * @generated from field: string context_url = 1;
   */
  contextUrl: string;

  /**
   * @generated from oneof gitpod.v1.WorkspaceContext.details
   */
  details: {
    /**
     * @generated from field: gitpod.v1.WorkspaceContext.Git git = 2;
     */
    value: WorkspaceContext_Git;
    case: "git";
  } | {
    /**
     * @generated from field: gitpod.v1.WorkspaceContext.Prebuild prebuild = 3;
     */
    value: WorkspaceContext_Prebuild;
    case: "prebuild";
  } | {
    /**
     * @generated from field: gitpod.v1.WorkspaceContext.Snapshot snapshot = 4;
     */
    value: WorkspaceContext_Snapshot;
    case: "snapshot";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<WorkspaceContext>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceContext";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext;

  static equals(a: WorkspaceContext | PlainMessage<WorkspaceContext> | undefined, b: WorkspaceContext | PlainMessage<WorkspaceContext> | undefined): boolean;
}

/**
 * Explicit Git context
 *
 * @generated from message gitpod.v1.WorkspaceContext.Git
 */
export declare class WorkspaceContext_Git extends Message<WorkspaceContext_Git> {
  /**
   * @generated from field: string normalized_context_url = 1;
   */
  normalizedContextUrl: string;

  /**
   * @generated from field: string commit = 2;
   */
  commit: string;

  constructor(data?: PartialMessage<WorkspaceContext_Git>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceContext.Git";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Git;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Git;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Git;

  static equals(a: WorkspaceContext_Git | PlainMessage<WorkspaceContext_Git> | undefined, b: WorkspaceContext_Git | PlainMessage<WorkspaceContext_Git> | undefined): boolean;
}

/**
 * Workspace was created from a prebuild
 *
 * @generated from message gitpod.v1.WorkspaceContext.Prebuild
 */
export declare class WorkspaceContext_Prebuild extends Message<WorkspaceContext_Prebuild> {
  /**
   * original_context is the Git context which lead to the selection
   * of a prebuild.
   *
   * @generated from field: gitpod.v1.WorkspaceContext.Git original_context = 1;
   */
  originalContext?: WorkspaceContext_Git;

  /**
   * prebuild_id is the ID of the prebuild which was used to create this workspace
   *
   * @generated from field: string prebuild_id = 2;
   */
  prebuildId: string;

  constructor(data?: PartialMessage<WorkspaceContext_Prebuild>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceContext.Prebuild";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Prebuild;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Prebuild;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Prebuild;

  static equals(a: WorkspaceContext_Prebuild | PlainMessage<WorkspaceContext_Prebuild> | undefined, b: WorkspaceContext_Prebuild | PlainMessage<WorkspaceContext_Prebuild> | undefined): boolean;
}

/**
 * Snapshot context points to the snapshot which the workspace was created from
 *
 * @generated from message gitpod.v1.WorkspaceContext.Snapshot
 */
export declare class WorkspaceContext_Snapshot extends Message<WorkspaceContext_Snapshot> {
  /**
   * @generated from field: string snapshot_id = 1;
   */
  snapshotId: string;

  constructor(data?: PartialMessage<WorkspaceContext_Snapshot>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceContext.Snapshot";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceContext_Snapshot;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceContext_Snapshot;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceContext_Snapshot;

  static equals(a: WorkspaceContext_Snapshot | PlainMessage<WorkspaceContext_Snapshot> | undefined, b: WorkspaceContext_Snapshot | PlainMessage<WorkspaceContext_Snapshot> | undefined): boolean;
}

/**
 * WorkspaceInstance describes a single workspace instance
 *
 * @generated from message gitpod.v1.WorkspaceInstance
 */
export declare class WorkspaceInstance extends Message<WorkspaceInstance> {
  /**
   * Instance ID is the unique identifier of the workspace instance
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Worksapce ID is the unique identifier of the workspace this instance belongs to
   *
   * @generated from field: string workspace_id = 2;
   */
  workspaceId: string;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: gitpod.v1.WorkspaceInstanceStatus status = 4;
   */
  status?: WorkspaceInstanceStatus;

  constructor(data?: PartialMessage<WorkspaceInstance>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceInstance";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstance;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstance;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstance;

  static equals(a: WorkspaceInstance | PlainMessage<WorkspaceInstance> | undefined, b: WorkspaceInstance | PlainMessage<WorkspaceInstance> | undefined): boolean;
}

/**
 * WorkspaceStatus describes a workspace status
 *
 * @generated from message gitpod.v1.WorkspaceInstanceStatus
 */
export declare class WorkspaceInstanceStatus extends Message<WorkspaceInstanceStatus> {
  /**
   * version of the status update. Workspace instances themselves are unversioned,
   * but their statuus has different versions.
   * The value of this field has no semantic meaning (e.g. don't interpret it as
   * as a timestemp), but it can be used to impose a partial order.
   * If a.status_version < b.status_version then a was the status before b.
   *
   * @generated from field: uint64 status_version = 1;
   */
  statusVersion: bigint;

  /**
   * the phase of a workspace is a simple, high-level summary of where the workspace instance is in its lifecycle
   *
   * @generated from field: gitpod.v1.WorkspaceInstanceStatus.Phase phase = 2;
   */
  phase: WorkspaceInstanceStatus_Phase;

  /**
   * conditions detail the current state of the workspace instance
   *
   * @generated from field: gitpod.v1.WorkspaceInstanceStatus.Conditions conditions = 3;
   */
  conditions?: WorkspaceInstanceStatus_Conditions;

  /**
   * message is an optional human-readable message detailing the current phase
   *
   * @generated from field: string message = 4;
   */
  message: string;

  /**
   * URL contains the endpoint at which the workspace instance is available
   *
   * @generated from field: string url = 5;
   */
  url: string;

  /**
   * Admission describes who can access a workspace instance and its ports.
   *
   * @generated from field: gitpod.v1.AdmissionLevel admission = 6;
   */
  admission: AdmissionLevel;

  constructor(data?: PartialMessage<WorkspaceInstanceStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceInstanceStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstanceStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus;

  static equals(a: WorkspaceInstanceStatus | PlainMessage<WorkspaceInstanceStatus> | undefined, b: WorkspaceInstanceStatus | PlainMessage<WorkspaceInstanceStatus> | undefined): boolean;
}

/**
 * Phase is a simple, high-level summary of where the workspace instance is in its lifecycle.
 * The phase is not intended to be a comprehensive rollup of observations of the workspace state,
 * nor is it intended to be a comprehensive state machine.
 * (based on  https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase)
 *
 * @generated from enum gitpod.v1.WorkspaceInstanceStatus.Phase
 */
export declare enum WorkspaceInstanceStatus_Phase {
  /**
   * Unknown indicates an issue within the workspace manager in that it cannot determine the actual phase of
   * a workspace. This phase is usually accompanied by an error.
   *
   * @generated from enum value: PHASE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Preparing means that we haven't actually started the workspace instance just yet, but rather
   * are still preparing for launch.
   *
   * @generated from enum value: PHASE_PREPARING = 1;
   */
  PREPARING = 1,

  /**
   * ImageBuild indicates that there's an image build running for this workspace.
   *
   * @generated from enum value: PHASE_IMAGEBUILD = 2;
   */
  IMAGEBUILD = 2,

  /**
   * Pending means the workspace does not yet consume resources in the cluster, but rather is looking for
   * some space within the cluster. If for example the cluster needs to scale up to accomodate the
   * workspace, the workspace will be in Pending state until that happened.
   *
   * @generated from enum value: PHASE_PENDING = 3;
   */
  PENDING = 3,

  /**
   * Creating means the workspace is currently being created. That includes downloading the images required
   * to run the workspace over the network. The time spent in this phase varies widely and depends on the current
   * network speed, image size and cache states.
   *
   * @generated from enum value: PHASE_CREATING = 4;
   */
  CREATING = 4,

  /**
   * Initializing is the phase in which the workspace is executing the appropriate workspace initializer (e.g. Git
   * clone or backup download). After this phase one can expect the workspace to either be Running or Failed.
   *
   * @generated from enum value: PHASE_INITIALIZING = 5;
   */
  INITIALIZING = 5,

  /**
   * Running means the workspace is able to actively perform work, either by serving a user through Theia,
   * or as a headless workspace.
   *
   * @generated from enum value: PHASE_RUNNING = 6;
   */
  RUNNING = 6,

  /**
   * Interrupted is an exceptional state where the container should be running but is temporarily unavailable.
   * When in this state, we expect it to become running or stopping anytime soon.
   *
   * @generated from enum value: PHASE_INTERRUPTED = 7;
   */
  INTERRUPTED = 7,

  /**
   * Stopping means that the workspace is currently shutting down. It could go to stopped every moment.
   *
   * @generated from enum value: PHASE_STOPPING = 8;
   */
  STOPPING = 8,

  /**
   * Stopped means the workspace ended regularly because it was shut down.
   *
   * @generated from enum value: PHASE_STOPPED = 9;
   */
  STOPPED = 9,
}

/**
 * Conditions gives more detailed information as to the state of the workspace. Which condition actually
 * has a value depends on the phase the workspace is in.
 *
 * @generated from message gitpod.v1.WorkspaceInstanceStatus.Conditions
 */
export declare class WorkspaceInstanceStatus_Conditions extends Message<WorkspaceInstanceStatus_Conditions> {
  /**
   * failed contains the reason the workspace failed to operate. If this field is empty, the workspace has not failed.
   * This field is filled exclusively when caused by system errors.
   *
   * @generated from field: string failed = 1;
   */
  failed: string;

  /**
   * timeout contains the reason the workspace has timed out. If this field is empty, the workspace has not timed out.
   *
   * @generated from field: string timeout = 2;
   */
  timeout: string;

  /**
   * first_user_activity is the time when MarkActive was first called on the workspace
   *
   * @generated from field: google.protobuf.Timestamp first_user_activity = 9;
   */
  firstUserActivity?: Timestamp;

  /**
   * stopped_by_request is true if the workspace was stopped using a StopWorkspace call
   *
   * @generated from field: optional bool stopped_by_request = 11;
   */
  stoppedByRequest?: boolean;

  constructor(data?: PartialMessage<WorkspaceInstanceStatus_Conditions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.WorkspaceInstanceStatus.Conditions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkspaceInstanceStatus_Conditions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus_Conditions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkspaceInstanceStatus_Conditions;

  static equals(a: WorkspaceInstanceStatus_Conditions | PlainMessage<WorkspaceInstanceStatus_Conditions> | undefined, b: WorkspaceInstanceStatus_Conditions | PlainMessage<WorkspaceInstanceStatus_Conditions> | undefined): boolean;
}

/**
 * StartWorkspaceSpec influences the workspace start
 *
 * future per-workspace-start fields, e.g. region
 *
 * @generated from message gitpod.v1.StartWorkspaceSpec
 */
export declare class StartWorkspaceSpec extends Message<StartWorkspaceSpec> {
  constructor(data?: PartialMessage<StartWorkspaceSpec>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "gitpod.v1.StartWorkspaceSpec";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartWorkspaceSpec;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartWorkspaceSpec;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartWorkspaceSpec;

  static equals(a: StartWorkspaceSpec | PlainMessage<StartWorkspaceSpec> | undefined, b: StartWorkspaceSpec | PlainMessage<StartWorkspaceSpec> | undefined): boolean;
}
